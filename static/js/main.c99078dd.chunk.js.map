{"version":3,"sources":["components/Login/Login.module.scss","components/Navbar/Navbar.module.scss","components/CardsList/CardsList.module.scss","components/PasswordRecovery/Password-recovery.module.scss","common/ModalWindow/ModalWindow.module.scss","components/Profile/Profile.module.scss","components/Registration/Registration.module.scss","components/Profile/PersonalIngormation.module.scss","components/EnterNewPassword/Enter-new-password.module.scss","common/InputContainer/InputContainer.module.scss","common/Pagination/Pagination.module.scss","common/ModalWindow/modalWindowProfile.module.scss","common/HeaderEnterApp/HeaderEnterApp.module.scss","common/MainActionButton/MainActionButton.module.scss","common/Preloader/Preloader.module.scss","components/Error404/Error404.module.scss","components/PacksList/PacksList.module.scss","api/api.ts","components/Profile/profile-reducer.ts","components/Login/login-reducer.ts","common/InputContainer/InputContainer.tsx","common/validation/EmailValidation.ts","common/HeaderEnterApp/HeaderEnterApp.tsx","media/loadings/loadingBtn.svg","common/Preloader/Preloader.tsx","common/MainActionButton/MainActionButton.tsx","common/validation/passwordValidation.ts","components/Login/Login.tsx","components/Profile/PersonalInformation.tsx","components/PacksList/packsList-reducer.ts","common/Pagination/Pagination.tsx","common/ModalWindow/ModalWindow.tsx","common/ModalWindow/ModalWindowUpdate.tsx","components/PacksList/ManagePacksButton.tsx","common/ModalWindow/ModalWindowAdd.tsx","components/PacksList/PacksList.tsx","common/ModalWindow/ModalWindowProfile.tsx","components/Profile/Profile.tsx","components/Error404/Error404.tsx","components/EnterNewPassword/enter-new-password-reducer.ts","components/EnterNewPassword/Enter-new-password.tsx","components/PasswordRecovery/password-recovery-reducer.ts","components/PasswordRecovery/Password-recovery.tsx","components/Registration/registration-reducer.ts","components/Registration/Registration.tsx","components/Navbar/Navbar.tsx","media/password/checkEmail.svg","components/PasswordRecovery/ChekEmail.tsx","components/CardsList/cardsList-reducer.ts","components/CardsList/ManageCardsButton.tsx","components/CardsList/CardsList.tsx","common/random.tsx","components/Learn/Learn.tsx","App.tsx","reportWebVitals.ts","state/redux-store.ts","index.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","loginAPI","email","password","rememberMe","post","PasswordRecoveryAPI","from","message","registrationAPI","SetNewPasswordAPI","resetPasswordToken","authAPI","avatar","name","put","delete","PacksListAPI","params","page","max","min","packName","pageCount","user_id","user__id","undefined","get","data","CardsListAPI","cardPack_id","grade","card_id","initialStateProfile","profile","_id","publicCardPacksCount","created","updated","isAdmin","verified","loadingRequest","setProfileAC","type","payload","loadingRequestAC","updateProfileAC","initialStateLogin","error","logIn","setServerErrorMessageLogin","AuthUser","dispatch","a","response","InputContainer","props","useState","showPassword","setShowPassword","className","s","emailPasswordContainer","inputTitle","title","typeInput","value","onChange","changeValue","placeholder","onBlur","alt","src","passwordControl","onClick","errorEmailPasswordMessage","errorMessage","emailValidation","test","HeaderEnterApp","logo","Preloader","st","PreloaderContainer","loadingProgress","MainActionButton","blueBtn","actionClick","disabled","loadingStatus","disabledBtnSubmit","PasswordValidation","Login","process","REACT_APP_EMAIL","emailValue","setEmailValue","REACT_APP_PASSWORD","passwordValue","setPasswordValue","useDispatch","useSelector","state","login","isLogIn","serverErrorMessage","errorEmailMessage","setErrorEmailMessage","errorPasswordMessage","setErrorPasswordMessage","useEffect","to","authPageContainer","emailPasswordLoginContainer","e","currentTarget","forgotPasswordBtn","btnFooterLoginContainer","errorMessageContainer","blueBtnContainer","userData","loginUserTC","DifferentAccountBtn","footerBtn","PersonalInformation","React","memo","registration","newName","setNewName","urlAvatar","setUrlAvatar","errorNickName","setErrorNickName","errorUrlAvatar","setErrorUrlAvatar","closeModelWindow","profilePageContainer","inputFields","btns","btnCancel","updatedUser","initialState","cardPacks","packsParams","sortPacks","cardPacksTotalCount","success","GetPacksListAC","packs","setPackNameAC","SetSuccessAC","getPackList","getStore","packsList","Pagination","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","pagination","pagePanel","filter","el","map","p","cn","selectedPage","pageNumber","ModalWindow","showModal","setShowModal","children","finalModal","modalWindow","visibilityWindow","finalBackgroundModal","backgroundModal","modalContainer","closeModalAdd","ModalWindowUpdate","packNameTitle","setPackNameTitle","setError","target","addModalAdd","trimmedPackName","trim","cardsPack","packId","getState","ManagePacksButton","showModalUpdate","setShowModalUpdate","deletePackFun","ModalWindowAdd","gradeTitle","setGradeTitle","ratingTitle","setRatingTitle","checkedPrivate","setCheckedPrivate","Number","toString","rating","private","PacksList","isAuth","idUser","searchTitle","setSearchTitle","showModalAdd","setShowModalAdd","onPageChangedHandler","useCallback","setPageNumberAC","useHistory","getPrivatePacks","pack_id","id","flex","checked","search","containerInputSearch","trimmedSearch","table","tableRow","tableHeader","pack","tableCol","cardsCount","user_name","card","activeClassName","activeLink","learn","ModalWindowProfile","width","height","modalStyle","left","modalBackground","modalMessage","style","Profile","editModeProfile","setEditModeProfile","profileContainer","profileAboutYou","btnEdit","btnLogout","console","log","numberOfCards","profilePacksList","Error404","pageNotFound","initialStateSetNewPassword","setServerErrorMessage","setLoading","setSuccess","EnterNewPassword","setPassword","token","useParams","newPassword","successResponse","containerNewPassword","event","textAction","positionActionBtn","setNewPasswordThunk","initialStatePasswordRecovery","setLoadingRequest","setServerErrorMessageRecovery","PasswordRecovery","setEmail","forgotPasswordContainer","passwordRecoveryThunk","initialStateRegistration","isRegistration","setRegistrationAC","setServerErrorMessageRegistration","Registration","checkPassword","setCheckPassword","registrationContainer","positionBtnsAndError","window","history","go","setRegistration","Navbar","nav","item","active","CheckEmail","containerCheckEmail","headerCheckEmail","imageCheckEmail","checkEmail","titleCheckEmail","textActionCheckEmail","arrayCard","sortCards","maxGrade","minGrade","cardsTotalCount","cardsPack_id","searchVal","sort","question","searchCardQuestion","GetCardsListAC","getCardsList","cards","ManageCardsButton","deleteCardFun","CardsList","cardsList","answer","getRandomCard","sum","reduce","acc","rand","random","res","newSum","grades","Learn","isChecked","setIsChecked","first","setFirst","shots","__v","comment","more_id","setCard","length","sendGrade","gradeCardTC","g","App","path","render","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","cl","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c99078dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"authPageContainer\":\"Login_authPageContainer__1MpR4\",\"emailPasswordLoginContainer\":\"Login_emailPasswordLoginContainer__3VWu5\",\"forgotPasswordBtn\":\"Login_forgotPasswordBtn__3k-bQ\",\"btnFooterLoginContainer\":\"Login_btnFooterLoginContainer__3NXik\",\"errorMessageContainer\":\"Login_errorMessageContainer__25d_F\",\"DifferentAccountBtn\":\"Login_DifferentAccountBtn__2IJvM\",\"footerBtn\":\"Login_footerBtn__39Jpb\",\"blueBtnContainer\":\"Login_blueBtnContainer__1C_nA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__dy_dt\",\"item\":\"Navbar_item__EDSfX\",\"activeLink\":\"Navbar_activeLink___AUOd\",\"tab_friend\":\"Navbar_tab_friend__3WtuI\",\"title_friend\":\"Navbar_title_friend__I6vHw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"CardsList_table__1xFVr\",\"tableHeader\":\"CardsList_tableHeader__3j3NJ\",\"tableRow\":\"CardsList_tableRow__5rIZr\",\"tableCol\":\"CardsList_tableCol__1BYOi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPasswordContainer\":\"Password-recovery_forgotPasswordContainer__-HT5x\",\"textAction\":\"Password-recovery_textAction__wWgt6\",\"containerCheckEmail\":\"Password-recovery_containerCheckEmail__2uRof\",\"headerCheckEmail\":\"Password-recovery_headerCheckEmail__3a-ko\",\"imageCheckEmail\":\"Password-recovery_imageCheckEmail__3R6zs\",\"titleCheckEmail\":\"Password-recovery_titleCheckEmail__p-tqV\",\"textActionCheckEmail\":\"Password-recovery_textActionCheckEmail__3drZP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContainer\":\"ModalWindow_modalContainer__3k0PU\",\"backgroundModal\":\"ModalWindow_backgroundModal__3EZup\",\"modalWindow\":\"ModalWindow_modalWindow__3qpCQ\",\"closeModalAdd\":\"ModalWindow_closeModalAdd__3iOQf\",\"visibilityWindow\":\"ModalWindow_visibilityWindow__2QCQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageContainer\":\"Profile_profilePageContainer__2LdTO\",\"profileContainer\":\"Profile_profileContainer__17oQg\",\"profileAboutYou\":\"Profile_profileAboutYou__1mNt_\",\"btnEdit\":\"Profile_btnEdit__1ybD_\",\"profilePacksList\":\"Profile_profilePacksList__8EI1r\",\"btnLogout\":\"Profile_btnLogout__2kFJO\",\"packsListContainer\":\"Profile_packsListContainer__1wtcn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationContainer\":\"Registration_registrationContainer__2RPes\",\"inputFields\":\"Registration_inputFields__2gOEq\",\"passwordControl\":\"Registration_passwordControl__3wnYO\",\"btns\":\"Registration_btns__ObIbf\",\"positionBtnsAndError\":\"Registration_positionBtnsAndError__3L7y6\",\"errorMessageContainer\":\"Registration_errorMessageContainer__2Dpt_\",\"blueBtnContainer\":\"Registration_blueBtnContainer__1kvkj\",\"btnCancel\":\"Registration_btnCancel__MVB1k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePageContainer\":\"PersonalIngormation_profilePageContainer__3-AFj\",\"btns\":\"PersonalIngormation_btns__3Yo2Y\",\"btnCancel\":\"PersonalIngormation_btnCancel__2fpQe\",\"blueBtnContainer\":\"PersonalIngormation_blueBtnContainer__DVWe_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerNewPassword\":\"Enter-new-password_containerNewPassword__3USHx\",\"textAction\":\"Enter-new-password_textAction__Lr5Ne\",\"blueBtnContainer\":\"Enter-new-password_blueBtnContainer__18Zd8\",\"errorMessageContainer\":\"Enter-new-password_errorMessageContainer__3VgKO\",\"positionActionBtn\":\"Enter-new-password_positionActionBtn__11Ns5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emailPasswordContainer\":\"InputContainer_emailPasswordContainer__1YzrB\",\"inputTitle\":\"InputContainer_inputTitle__ahUPX\",\"errorEmailPasswordMessage\":\"InputContainer_errorEmailPasswordMessage__2ZJjD\",\"passwordControl\":\"InputContainer_passwordControl__3KCy8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__2Wr9V\",\"pagePanel\":\"Pagination_pagePanel__oL995\",\"pageNumber\":\"Pagination_pageNumber__21ft0\",\"selectedPage\":\"Pagination_selectedPage__3t3Uy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBackground\":\"modalWindowProfile_modalBackground__1OQ6W\",\"modalMessage\":\"modalWindowProfile_modalMessage__2YPI7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"HeaderEnterApp_logo__1AD_q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blueBtn\":\"MainActionButton_blueBtn__3Y_tc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PreloaderContainer\":\"Preloader_PreloaderContainer__kHX69\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFound\":\"Error404_pageNotFound__1GHFm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"PacksList_flex__2ZUYm\",\"private\":\"PacksList_private__1ZDFG\",\"search\":\"PacksList_search__2gHHt\",\"table\":\"PacksList_table__DKTl1\",\"tableHeader\":\"PacksList_tableHeader__2GfWE\",\"tableRow\":\"PacksList_tableRow__1zvGx\",\"tableCol\":\"PacksList_tableCol__3WoIw\",\"containerInputSearch\":\"PacksList_containerInputSearch__MRiFq\",\"modalContainer\":\"PacksList_modalContainer__3olct\",\"backgroundModal\":\"PacksList_backgroundModal__2Icyb\",\"modalWindowAdd\":\"PacksList_modalWindowAdd__3Xyfb\",\"closeModalAdd\":\"PacksList_closeModalAdd__38jlk\",\"addModalAdd\":\"PacksList_addModalAdd__2C92i\",\"visibilityWindow\":\"PacksList_visibilityWindow__2bg5N\",\"btnLearn\":\"PacksList_btnLearn__2CSLi\",\"card\":\"PacksList_card__O1d94\",\"learn\":\"PacksList_learn__2XblR\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n})\r\n\r\n\r\n//API\r\nexport const loginAPI = {\r\n    logIn(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<loginResponseType>('auth/login', {email, password, rememberMe})\r\n    }\r\n}\r\nexport const PasswordRecoveryAPI = {\r\n    forgot(email: string) {\r\n        return instance.post<PasswordRecoveryDataType>('/auth/forgot', {\r\n            email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n                        <a href='https://JamesWhite10.github.io/learning-cards#/new-password/$token$'>link</a></div>`\r\n        })\r\n    }\r\n}\r\nexport const registrationAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<registrationResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\nexport const SetNewPasswordAPI = {\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SetNewPasswordDataType>(\"/auth/set-new-password\", {\r\n            password,\r\n            resetPasswordToken,\r\n        })\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.post<loginResponseType>('auth/me', {})\r\n    },\r\n    updateProfile(avatar: string, name: string) {\r\n        return instance.put<profileResponseType>('auth/me', {avatar, name})\r\n    },\r\n    logOut() {\r\n        return instance.delete<logOutType>('auth/me')\r\n    }\r\n}\r\nexport const PacksListAPI = {\r\n    getPacks(params: getPacksAPIParamsType) {\r\n        const {page, max, min, packName, pageCount, user_id} = params\r\n        const user__id = user_id !== undefined ? `&user_id=${user_id}` : ''\r\n        return instance.get<resultGetPacksAPIType>(`cards/pack?page=${page}&pageCount=${pageCount}&packName=${packName}&min=${min}&max=${max}${user__id}`)\r\n    },\r\n    addCardsPack(data: addCardsPackDataType) {\r\n        return instance.post<Array<cardsPackType>>('/cards/pack', data)\r\n    },\r\n    deleteCardsPack(params: { id: string }) {\r\n        return instance.delete<Array<cardsPackType>>('/cards/pack', {params})\r\n    },\r\n    changeCardsPack(data: { cardsPack:{ _id: string, name?: string } }) {\r\n        return instance.put<Array<cardsPackType>>('/cards/pack', data)\r\n    },\r\n}\r\n\r\nexport const CardsListAPI = {\r\n    getCards(params: getCardsAPIParamsType) {\r\n        return instance.get<resultGetCardsAPIType>(`/cards/card?cardsPack_id=${params.cardPack_id}`\r\n            + \"&pageCount=50\")\r\n    },\r\n    addCard(data: addCardDataType) {\r\n        return instance.post<Array<cardType>>('/cards/card', data)\r\n    },\r\n    deleteCard(params: { id: string }) {\r\n        return instance.delete<Array<cardType>>('/cards/card', {params})\r\n    },\r\n    changeCard(data: { _id: string, question?: string, comments?: string }) {\r\n        return instance.put<Array<cardType>>('/cards/card', data)\r\n    },\r\n    setCardGrade(grade: number, card_id: string) {\r\n        return instance.put<SetGradeResponseType>('/cards/grade', {grade, card_id})\r\n    },\r\n}\r\n\r\n//TYPES=====\r\n\r\n//loginAPI\r\nexport type loginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: ''\r\n    updated: ''\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n\r\n//profileAPI\r\nexport type profileResponseType = {\r\n    updatedUser: loginResponseType\r\n    error?: string\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n//authAPI\r\ntype logOutType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\n//PasswordRecoveryAPI\r\nexport type PasswordRecoveryDataType = {\r\n    error: string;\r\n}\r\n\r\n//SetNewPasswordAPI\r\nexport type SetNewPasswordDataType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\n//registrationAPI\r\ntype registrationResponseType = {\r\n    addedUser: addedUserType\r\n    error?: string\r\n}\r\ntype addedUserType = {\r\n    _id: string,\r\n    email: string,\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    verified: boolean,\r\n    publicCardPacksCount: 0,\r\n    created: string,\r\n    updated: string,\r\n    __v: number\r\n}\r\n\r\n//PacksListAPI\r\ntype cardAndPackType = \"pack\" | \"folder\" | \"card\"\r\n\r\nexport type cardsPackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name: string\r\n    name: string\r\n    path?: string\r\n    cardsCount: number\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    type?: cardAndPackType\r\n    created: string\r\n    updated: string\r\n    __v?: number\r\n\r\n}\r\nexport type getPacksAPIParamsType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}\r\nexport type resultGetPacksAPIType = {\r\n    cardPacks: Array<cardsPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n}\r\nexport type addCardsPackDataType = {\r\n    cardsPack: {\r\n        name?: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: boolean\r\n        type?: string\r\n    }\r\n}\r\n\r\n//CardsListAPI\r\nexport type cardType = {\r\n    answer?: string\r\n    question?: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating?: number\r\n    shots?: number\r\n    type?: cardAndPackType\r\n    more_id: string\r\n    user_id: string\r\n    created?: string\r\n    updated?: string\r\n    comment: string,\r\n    __v?: number\r\n    _id: string\r\n}\r\n\r\nexport type getCardsAPIParamsType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\nexport type resultGetCardsAPIType = {\r\n    cards: Array<cardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type addCardDataType = {\r\n    card: {\r\n        cardsPack_id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        answerImg?: string\r\n        questionImg?: string\r\n        questionVideo?: string\r\n        type?: cardAndPackType\r\n    }\r\n}\r\n\r\n//LearnAPI\r\ntype SetGradeResponseType = {\r\n    updatedGrade: {\r\n        _id: string\r\n        cardsPack_id: string\r\n        card_id: string\r\n        user_id: string\r\n        grade: number\r\n        shots: number\r\n    }\r\n}","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nconst initialStateProfile = {\r\n    profile: {\r\n        _id: '',\r\n        email: '',\r\n        name: '',\r\n        avatar: '',\r\n        publicCardPacksCount: 0,\r\n        created: '',\r\n        updated: '',\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n    } as profileResponseType,\r\n    loadingRequest: false\r\n}\r\n\r\nexport const profileReducer = (state: initialProfileType = initialStateProfile, action: actionsProfileType) => {\r\n    switch (action.type) {\r\n        case 'PROFILE/SET_PROFILE_DATA': {\r\n            return {...state, ...action.payload}\r\n        }\r\n        case 'PROFILE/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'PROFILE/UPDATE-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, ...action.payload}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setProfileAC = (profile: profileResponseType) => {\r\n    return {\r\n        type: \"PROFILE/SET_PROFILE_DATA\",\r\n        payload: {profile}\r\n    } as const\r\n}\r\nconst loadingRequestAC = (loadingRequest: boolean) => {\r\n    return {\r\n        type: 'PROFILE/LOADING-REQUEST',\r\n        payload: {loadingRequest}\r\n    } as const\r\n}\r\nexport const updateProfileAC = (avatar: string, name: string) => ({\r\n    type: 'PROFILE/UPDATE-PROFILE',\r\n    payload: {avatar, name}\r\n} as const)\r\n\r\n\r\n//thunkC\r\nexport const updateProfile = (avatar: string, name: string): AppThunkType => async (dispatch: Dispatch<actionsProfileType>) => {\r\n    dispatch(loadingRequestAC(true))\r\n    try {\r\n        const response = await authAPI.updateProfile(avatar, name)\r\n        debugger\r\n        dispatch(updateProfileAC(response.data.updatedUser.avatar, response.data.updatedUser.name))\r\n    } catch (e) {\r\n        /*const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRegistration(error))*/\r\n    } finally {\r\n        dispatch(loadingRequestAC(false))\r\n    }\r\n}\r\n\r\nexport const setProfile = (): AppThunkType => async (dispatch: Dispatch<actionsProfileType>) => {\r\n    try {\r\n        const response = await authAPI.me()\r\n        dispatch(setProfileAC(response.data))\r\n    } catch (e) {\r\n    }\r\n}\r\n\r\n//types\r\ntype initialProfileType = typeof initialStateProfile\r\n\r\nexport type actionsProfileType =\r\n    | ReturnType<typeof loadingRequestAC>\r\n    | ReturnType<typeof updateProfileAC>\r\n    | ReturnType<typeof setProfileAC>\r\n\r\nexport type profileResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\n\r\n","import {authAPI, loginAPI, loginResponseType} from \"../../api/api\";\r\nimport {AppThunkType} from \"../../state/redux-store\";\r\nimport {setProfileAC} from \"../Profile/profile-reducer\";\r\n\r\nconst initialStateLogin: initialLoginType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,\r\n    created: '',\r\n    updated: '',\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n    error: '',\r\n    loadingRequest: false,\r\n    logIn: false\r\n}\r\n\r\nexport const loginReducer = (state: initialLoginType = initialStateLogin, action: actionsLoginType): initialLoginType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/LOGIN-USER':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/LOG-IN':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const loginUser = (userData: loginResponseType) => {\r\n    return {\r\n        type: 'LOGIN/LOGIN-USER',\r\n        payload: {...userData}\r\n    } as const\r\n}\r\nconst loadingRequest = (loadingRequest: boolean) => {\r\n    return {\r\n        type: 'LOGIN/LOADING-REQUEST',\r\n        payload: {loadingRequest}\r\n    } as const\r\n}\r\nexport const logIn = (logIn: boolean) => {\r\n    return {\r\n        type: 'LOGIN/LOG-IN',\r\n        payload: {logIn}\r\n    } as const\r\n}\r\nexport const setServerErrorMessageLogin = (error: string) => {\r\n    return {\r\n        type: 'LOGIN/SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n\r\n//thunkC\r\nexport const loginUserTC = (emailValue: string, passwordValue: string): AppThunkType => async (dispatch) => {\r\n    dispatch(loadingRequest(true))\r\n\r\n    try {\r\n        const response = await loginAPI.logIn(emailValue, passwordValue)\r\n        dispatch(loginUser(response.data))\r\n        dispatch(logIn(true))\r\n\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        dispatch(setServerErrorMessageLogin(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\nexport const AuthUser = (): AppThunkType => async (dispatch) => {\r\n    dispatch(loadingRequest(true))\r\n    try {\r\n        const response = await authAPI.me()\r\n\r\n        dispatch(logIn(true))\r\n        dispatch(setProfileAC(response.data))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        dispatch(setServerErrorMessageLogin(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\nexport const logOutUser = (): AppThunkType => async (dispatch) => {\r\n    try {\r\n        const response = await authAPI.logOut()\r\n        dispatch(logIn(false))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialLoginType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error: string\r\n    loadingRequest: boolean\r\n    logIn: boolean\r\n}\r\nexport type actionsLoginType = ReturnType<typeof loginUser>\r\n    | ReturnType<typeof loadingRequest>\r\n    | ReturnType<typeof logIn>\r\n    | ReturnType<typeof setServerErrorMessageLogin>","import s from \"./InputContainer.module.scss\";\r\nimport React, {ChangeEvent, FocusEvent, useState} from \"react\";\r\n\r\ntype InputContainerPropsType = {\r\n    title?: string\r\n    value: string\r\n    changeValue: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    errorMessage: string\r\n    typeInput: 'email' | 'password' | 'text'\r\n    placeholder?: string\r\n    onBlur?: (e: FocusEvent<HTMLInputElement>) => void\r\n}\r\nexport const InputContainer = (props: InputContainerPropsType) => {\r\n    const [showPassword, setShowPassword] = useState<boolean>(false)\r\n\r\n    const typeShowInput = () => {\r\n        if (props.typeInput === 'password') {\r\n            return showPassword ? 'text' : 'password'\r\n        }\r\n        return props.typeInput\r\n    }\r\n\r\n    return (\r\n        <label className={s.emailPasswordContainer}>\r\n            <span className={s.inputTitle}>{props.title}</span>\r\n            <input\r\n                type={typeShowInput()}\r\n                value={props.value}\r\n                onChange={props.changeValue}\r\n                placeholder={props.placeholder}\r\n                onBlur={props.onBlur}\r\n            />\r\n            {props.typeInput === 'password'\r\n            &&\r\n            <img alt={'your password'}\r\n                 src={showPassword ? 'https://snipp.ru/demo/495/no-view.svg' : 'https://snipp.ru/demo/495/view.svg'}\r\n                 className={s.passwordControl} onClick={() => {setShowPassword(!showPassword)}}/>\r\n            }\r\n            <span className={s.errorEmailPasswordMessage}>{props.errorMessage}</span>\r\n        </label>\r\n    )\r\n}","export const emailValidation = (value: string) => {\n    return /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n}","import s from \"./HeaderEnterApp.module.scss\";\r\nimport React from \"react\";\r\n\r\ntype HeaderEnterAppType = {\r\n    title?: string\r\n}\r\nexport const HeaderEnterApp = ({title}: HeaderEnterAppType) => {\r\n    return (\r\n        <div>\r\n            <div className={s.logo}>It-incubator</div>\r\n            <h1>{title}</h1>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/loadingBtn.95ae2c78.svg\";","import React from \"react\";\r\nimport loadingProgress from '../../media/loadings/loadingBtn.svg'\r\nimport st from './Preloader.module.scss'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div className={st.PreloaderContainer}>\r\n            <img alt={'preloader'} src={loadingProgress} />\r\n        </div>\r\n    )\r\n}","import s from \"./MainActionButton.module.scss\";\r\nimport {Preloader} from \"../Preloader/Preloader\";\r\nimport React from \"react\";\r\n\r\ntype MainActionButton = {\r\n    actionClick: () => void\r\n    loadingStatus?: boolean\r\n    disabledBtnSubmit?: boolean\r\n    title: string\r\n}\r\n\r\nexport const MainActionButton = (props: MainActionButton) => {\r\n    return (\r\n        <button className={s.blueBtn}\r\n                onClick={props.actionClick}\r\n                disabled={props.loadingStatus || props.disabledBtnSubmit}>{props.loadingStatus ? <Preloader/> : props.title}</button>\r\n    )\r\n}","export const PasswordValidation = (value: string) => {\n    return /[0-9a-zA-Z!@#$%^&*]{8,}/.test(value)\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './Login.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginUserTC, setServerErrorMessageLogin} from \"./login-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\n\r\nexport const Login = () => {\r\n    const [emailValue, setEmailValue] = useState<string>(process.env.REACT_APP_EMAIL || '')\r\n    const [passwordValue, setPasswordValue] = useState<string>(process.env.REACT_APP_PASSWORD || '')\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const isLogIn = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.login.error)\r\n\r\n    const [errorEmailMessage, setErrorEmailMessage] = useState<string>('')\r\n    const [errorPasswordMessage, setErrorPasswordMessage] = useState<string>('')\r\n\r\n    const changeEmailValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmailValue(e.currentTarget.value)\r\n        setErrorEmailMessage('')\r\n        serverErrorMessage && dispatch(setServerErrorMessageLogin(''))\r\n    }\r\n    const changePasswordValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordValue(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageLogin(''))\r\n        setErrorPasswordMessage('')\r\n    }\r\n\r\n    const checkLoginUser = () => {\r\n        if (!emailValidation(emailValue)) {\r\n            setErrorEmailMessage('Incorrect email')\r\n        } else if (!PasswordValidation(passwordValue)) {\r\n            setErrorPasswordMessage('Minimum 8 characters')\r\n        } else {\r\n            dispatch(loginUserTC(emailValue, passwordValue))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setServerErrorMessageLogin(''))\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (isLogIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    const disabledBtnSubmit = !emailValue || !passwordValue\r\n\r\n    return (\r\n        <div className={s.authPageContainer}>\r\n            <HeaderEnterApp title={'Sign In'}/>\r\n\r\n            <div className={s.emailPasswordLoginContainer}>\r\n                <InputContainer\r\n                    title={'Email'}\r\n                    typeInput={'email'}\r\n                    value={emailValue}\r\n                    changeValue={changeEmailValue}\r\n                    errorMessage={errorEmailMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'Password'}\r\n                    typeInput={'password'}\r\n                    value={passwordValue}\r\n                    changeValue={changePasswordValue}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n\r\n                <div className={s.forgotPasswordBtn}>\r\n                    <NavLink to=\"/password-recovery\">Forgot Password</NavLink>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.btnFooterLoginContainer}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton actionClick={checkLoginUser}\r\n                                disabledBtnSubmit={disabledBtnSubmit}\r\n                                loadingStatus={loadingStatus}\r\n                                title={'login'}\r\n                    />\r\n                </div>\r\n                <p className={s.DifferentAccountBtn}>Don't have an account</p>\r\n                <NavLink to=\"/registration\" className={s.footerBtn}>Sing Up</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport s from \"../Profile/PersonalIngormation.module.scss\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {updateProfile} from \"./profile-reducer\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\n\r\ntype PersonalInformationPropsType = {\r\n    onClick: () => void\r\n    avatar: string\r\n    name: string\r\n}\r\n\r\nexport const PersonalInformation = React.memo((props: PersonalInformationPropsType) => {\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.registration.loadingRequest)\r\n    const dispatch = useDispatch()\r\n\r\n    const [newName, setNewName] = useState<string>(props.name)\r\n    const [urlAvatar, setUrlAvatar] = useState<string>(props.avatar)\r\n    const [errorNickName, setErrorNickName] = useState<string>('')\r\n    const [errorUrlAvatar, setErrorUrlAvatar] = useState<string>('')\r\n\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUrlAvatar(e.currentTarget.value)\r\n    }\r\n\r\n    const closeModelWindow = () => {\r\n        props.onClick()\r\n    }\r\n\r\n    const disabledBtnSubmit = !newName || !urlAvatar\r\n\r\n    const onSaveInformation = () => {\r\n        debugger\r\n        if (!newName) {\r\n            setErrorNickName('Incorrect nick name')\r\n        } else if (!urlAvatar) {\r\n            setErrorUrlAvatar('Incorrect url address')\r\n        } else {\r\n            dispatch(updateProfile(urlAvatar, newName));\r\n            closeModelWindow();\r\n        }\r\n    }\r\n\r\n   return (\r\n        <div className={s.profilePageContainer}>\r\n\r\n                    <h2>Personal information</h2>\r\n                    <img src={urlAvatar && urlAvatar ? urlAvatar : ''} alt=\"user_photo\"/>\r\n                    <div className={s.inputFields}>\r\n                        <InputContainer\r\n                            title={'Nick name'}\r\n                            typeInput={'text'}\r\n                            value={newName}\r\n                            changeValue={onChangeName}\r\n                            errorMessage={errorNickName}\r\n                        />\r\n                        <InputContainer\r\n                            title={'URL photo'}\r\n                            typeInput={'text'}\r\n                            value={urlAvatar}\r\n                            changeValue={onChangeAvatar}\r\n                            errorMessage={errorUrlAvatar}\r\n                        />\r\n                    </div>\r\n                    <div className={s.btns}>\r\n                        <a className={s.btnCancel} onClick={closeModelWindow}>Cancel</a>\r\n                        <div className={s.blueBtnContainer}>\r\n                            <MainActionButton\r\n                                actionClick={onSaveInformation}\r\n                                disabledBtnSubmit={disabledBtnSubmit}\r\n                                title={'Save'}\r\n                                loadingStatus={loadingStatus}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n        </div>\r\n    )\r\n})","import {\r\n    addCardsPackDataType,\r\n    cardsPackType,\r\n    getPacksAPIParamsType,\r\n    PacksListAPI,\r\n} from \"../../api/api\";\r\nimport {AppThunkType, GetAppStateType} from \"../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype InitialStateType = {\r\n    cardPacks:cardsPackType[]\r\n    packsParams:getPacksAPIParamsType\r\n    cardPacksTotalCount: number\r\n    success: boolean\r\n}\r\n\r\nexport const initialState: InitialStateType = {\r\n    cardPacks: [] as cardsPackType[],\r\n    packsParams: {\r\n        min: 0,\r\n        max: 20,\r\n        page: 1,\r\n        pageCount: 15,\r\n        sortPacks: '0updated',\r\n        packName: ''\r\n    },\r\n    cardPacksTotalCount: 0,\r\n    success: false,\r\n}\r\n\r\n//types\r\ntype GetPacksListAT = ReturnType<typeof GetPacksListAC>\r\ntype setPageNumber = ReturnType<typeof setPageNumberAC>\r\ntype setTotalPacksCountAC = ReturnType<typeof setTotalPacksCountAC>\r\ntype setPageCountAC = ReturnType<typeof setPageCountAC>\r\ntype setPackNameAT = ReturnType<typeof setPackNameAC>\r\ntype SetSuccessAT = ReturnType<typeof SetSuccessAC>\r\n// type AddPackAT = ReturnType<typeof AddPackAC>\r\n\r\nexport type actionPacksListType = GetPacksListAT | SetSuccessAT | setPageNumber | setTotalPacksCountAC | setPackNameAT | setPageCountAC\r\n\r\n//actionC\r\nexport const GetPacksListAC = (packs: Array<cardsPackType>) => ({type: 'packList/GET-PACKSLIST', packs} as const)\r\nexport const setPageNumberAC =  (page:number) => ({type:'packList/SET-PAGE-NUMBER' , page} as const)\r\nexport const setTotalPacksCountAC = (cardPacksTotalCount: number)  => ({type: 'packList/SET-PACKS-TOTAL-COUNT', cardPacksTotalCount} as const)\r\nexport const setPageCountAC = (pageCount: number) => ({type: `packList/SET-PAGE-COUNT`, pageCount} as const)\r\nexport const setPackNameAC = (packName: string) => ({type: `packList/SET-PACK-NAME`, packName} as const)\r\nexport const SetSuccessAC = (success: boolean) => ({type: 'packList/SET-SUCCESS', success} as const)\r\n\r\n\r\n//export const AddPackAC = (payload: addCardsPackDataType) => ({type: \"packList/ADD-PACK\", payload} as const)\r\n\r\nexport const packsListReducer = (state = initialState, action: actionPacksListType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"packList/GET-PACKSLIST\":\r\n            return ({\r\n                ...state,\r\n                cardPacks:action.packs\r\n            })\r\n        case 'packList/SET-PAGE-NUMBER': {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, page: action.page}\r\n            })\r\n        }\r\n        case 'packList/SET-PACKS-TOTAL-COUNT': {\r\n            return ({\r\n                ...state,\r\n                cardPacksTotalCount: action.cardPacksTotalCount\r\n            })\r\n        }\r\n        case 'packList/SET-PAGE-COUNT': {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, pageCount: action.pageCount}\r\n            })\r\n        }\r\n        case \"packList/SET-PACK-NAME\": {\r\n            return ({\r\n                ...state,\r\n                packsParams: {...state.packsParams, packName: action.packName}\r\n            })\r\n        }\r\n        case \"packList/SET-SUCCESS\":\r\n            return {...state, success: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunkC\r\nexport const getPackList = (params: getPacksAPIParamsType): AppThunkType => async (dispatch: Dispatch<actionPacksListType>, getStore: GetAppStateType) => {\r\n    const {page} = getStore().packsList.packsParams\r\n    try {\r\n        const response = await PacksListAPI.getPacks({...params,page})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n        dispatch(setTotalPacksCountAC(response.data.cardPacksTotalCount))\r\n        dispatch(SetSuccessAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(SetSuccessAC(false))\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const addPack = (data: addCardsPackDataType): AppThunkType => async (dispatch: Dispatch<actionPacksListType>,getState:GetAppStateType) => {\r\n    const {sortPacks, min, max, page, user_id, pageCount, packName} = getState().packsList.packsParams\r\n    try {\r\n        const responseAdd = await PacksListAPI.addCardsPack(data)\r\n        const response = await PacksListAPI.getPacks({pageCount, user_id, page, max, min, sortPacks, packName})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const deletePack = (params: {id: string}): AppThunkType => async (dispatch: Dispatch<actionPacksListType>,getState:GetAppStateType) => {\r\n    const {sortPacks, min, max, page, pageCount, packName} = getState().packsList.packsParams\r\n    const _id = getState().profile.profile._id\r\n    try {\r\n        const responseDelete = await PacksListAPI.deleteCardsPack(params)\r\n        const response = await PacksListAPI.getPacks({pageCount, user_id: _id, page, max, min, sortPacks, packName})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const updatePack = (data: { cardsPack: { _id: string, name?: string } }): AppThunkType => async (dispatch: Dispatch<actionPacksListType>,getState:GetAppStateType) => {\r\n    const {sortPacks, min, max, page, user_id, pageCount, packName} = getState().packsList.packsParams\r\n    const _id = getState().profile.profile._id\r\n    try {\r\n        const responseUpdate = await PacksListAPI.changeCardsPack(data)\r\n        const response = await PacksListAPI.getPacks({pageCount, user_id, page, max, min, sortPacks, packName})\r\n        dispatch(GetPacksListAC(response.data.cardPacks))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport styles from './Pagination.module.scss';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Pagination: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: number[] = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (<div className={styles.pagination}>\r\n\r\n\r\n        <div className={styles.pagePanel}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => { setPortionNumber(portionNumber - 1) } }\r\n            >Previous\r\n            </button>}\r\n\r\n            {pages\r\n                .filter(el => (el >= leftPortionPageNumber && el <= rightPortionPageNumber))\r\n                .map(p => {\r\n                    return <span className={ cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber) }\r\n                                 onClick={() => {onPageChanged(p)}}\r\n                                 key={p}\r\n                    >\r\n                        {p}\r\n                    </span>\r\n                })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>Next</button>\r\n            }\r\n        </div>\r\n\r\n    </div>)\r\n}\r\n","import React, {DetailedHTMLProps, HTMLAttributes} from \"react\";\r\nimport s from \"./ModalWindow.module.scss\";\r\nimport {ModalWindowPropsType} from \"./ModalWindowAdd\";\r\n\r\ntype DefaultDivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>\r\n\r\ntype CommonModalWindowPropsType = DefaultDivPropsType & ModalWindowPropsType\r\n\r\nexport const ModalWindow: React.FC<ModalWindowPropsType> = ({showModal, setShowModal, children}) => {\r\n    const finalModal = showModal ? `${s.modalWindow} ${s.visibilityWindow}` : `${s.modalWindow}`\r\n    const finalBackgroundModal = showModal ? `${s.backgroundModal} ${s.visibilityWindow}` : `${s.backgroundModal}`\r\n\r\n    return (\r\n        <div className={s.modalContainer}>\r\n            <div className={finalBackgroundModal} onClick={() => setShowModal(false)}></div>\r\n            <div className={finalModal}>\r\n                <button className={s.closeModalAdd} onClick={() => setShowModal(false)}>X</button>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ModalWindow} from \"./ModalWindow\";\r\nimport {InputContainer} from \"../InputContainer/InputContainer\";\r\nimport s from \"../../components/PacksList/PacksList.module.scss\";\r\nimport {MainActionButton} from \"../MainActionButton/MainActionButton\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {addPack, updatePack} from \"../../components/PacksList/packsList-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type ModalWindowPropsType = {\r\n    packId: string\r\n    showModal: boolean\r\n    setShowModal: (showModal: boolean) => void\r\n}\r\n\r\nexport const ModalWindowUpdate: React.FC<ModalWindowPropsType> = (props) => {\r\n    const [packNameTitle, setPackNameTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const dispatch = useDispatch();\r\n\r\n    const changePackName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setPackNameTitle(e.target.value)\r\n    }\r\n\r\n    const updatePackFun = () => {\r\n        const trimmedPackName = packNameTitle.trim()\r\n        if (trimmedPackName) {\r\n            dispatch(updatePack({cardsPack:{_id: props.packId, name: trimmedPackName}}))\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setPackNameTitle(\"\")\r\n        props.setShowModal(false)\r\n    }\r\n\r\n    return <ModalWindow showModal={props.showModal} setShowModal={props.setShowModal}>\r\n        <InputContainer\r\n            placeholder={\"New pack name\"}\r\n            changeValue={changePackName}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={packNameTitle}\r\n        />\r\n        <div className={s.addModalAdd}>\r\n            <MainActionButton actionClick={updatePackFun}\r\n                              title={\"UPDATE\"}\r\n            />\r\n        </div>\r\n    </ModalWindow>;\r\n}","import React, {useState} from \"react\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {ModalWindowUpdate} from \"../../common/ModalWindow/ModalWindowUpdate\";\r\n\r\ntype ManageButtonPropsType = {\r\n    _id: string\r\n    deletePackFun: (id: string) => void\r\n}\r\n\r\nexport const ManagePacksButton: React.FC<ManageButtonPropsType> = (props) => {\r\n    const [showModalUpdate, setShowModalUpdate] = useState<boolean>(false)\r\n\r\n    const updatePack = () => {\r\n        setShowModalUpdate(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td>\r\n                <MainActionButton actionClick={() => props.deletePackFun(props._id)}\r\n                                  title={\"DELETE\"}/>\r\n            </td>\r\n            <td>\r\n                <MainActionButton actionClick={updatePack}\r\n                                  title={\"UPDATE\"}/>\r\n            </td>\r\n            <ModalWindowUpdate packId={props._id} showModal={showModalUpdate} setShowModal={setShowModalUpdate} />\r\n        </>\r\n    )\r\n}","import {ModalWindow} from \"./ModalWindow\";\r\nimport {InputContainer} from \"../InputContainer/InputContainer\";\r\nimport s from \"../../components/PacksList/PacksList.module.scss\";\r\nimport {MainActionButton} from \"../MainActionButton/MainActionButton\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {addPack} from \"../../components/PacksList/packsList-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type ModalWindowPropsType = {\r\n    showModal: boolean\r\n    setShowModal: (showModal: boolean) => void\r\n}\r\n\r\nexport const ModalWindowAdd: React.FC<ModalWindowPropsType> = (props) => {\r\n    const [packNameTitle, setPackNameTitle] = useState<string>(\"\")\r\n    const [gradeTitle, setGradeTitle] = useState<number>(0)\r\n    const [ratingTitle, setRatingTitle] = useState<number>(0)\r\n    const [checkedPrivate, setCheckedPrivate] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n    const dispatch = useDispatch();\r\n\r\n    const changePackName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setPackNameTitle(e.target.value)\r\n    }\r\n    const changeGrade = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (Number(e.target.value) > 5 || Number(e.target.value) < 0) {\r\n            setError('Enter a value between 0 and 5')\r\n        } else {\r\n            setGradeTitle(Number(e.target.value))\r\n        }\r\n    }\r\n    const changeRating = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        if (Number(e.target.value) > 5 || Number(e.target.value) < 0) {\r\n            setError('Enter a value between 0 and 5')\r\n        } else {\r\n            setRatingTitle(Number(e.target.value))\r\n        }\r\n    }\r\n\r\n    const addPackFun = () => {\r\n        const trimmedPackName = packNameTitle.trim()\r\n        if (trimmedPackName) {\r\n            setCheckedPrivate(false)\r\n            dispatch(addPack({cardsPack: {name: trimmedPackName, grade: gradeTitle, rating: ratingTitle, private: checkedPrivate}}))\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setPackNameTitle(\"\")\r\n        setGradeTitle(0)\r\n        setRatingTitle(0)\r\n        props.setShowModal(false)\r\n    }\r\n\r\n    return <ModalWindow showModal={props.showModal} setShowModal={props.setShowModal}>\r\n        <InputContainer\r\n            placeholder={\"Pack name\"}\r\n            changeValue={changePackName}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={packNameTitle}\r\n        />\r\n        <InputContainer\r\n            placeholder={\"Grade\"}\r\n            changeValue={changeGrade}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={gradeTitle.toString()}\r\n        />\r\n        <InputContainer\r\n            placeholder={\"Rating\"}\r\n            changeValue={changeRating}\r\n            errorMessage={\"\"}\r\n            typeInput={\"text\"}\r\n            value={ratingTitle.toString()}\r\n        />\r\n        <div className={s.addModalAdd}>\r\n            <MainActionButton actionClick={addPackFun}\r\n                              title={\"ADD\"}/>\r\n        </div>\r\n    </ModalWindow>;\r\n}","import s from './PacksList.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport {deletePack, getPackList, setPackNameAC, setPageNumberAC} from \"./packsList-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {cardsPackType, getPacksAPIParamsType} from \"../../api/api\";\r\nimport {NavLink, Redirect, useHistory} from \"react-router-dom\";\r\nimport {AuthUser} from \"../Login/login-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {Pagination} from \"../../common/Pagination/Pagination\";\r\nimport {ManagePacksButton} from './ManagePacksButton';\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {ModalWindowAdd} from \"../../common/ModalWindow/ModalWindowAdd\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const PacksList = (props: { user_id?: string }) => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const idUser = useSelector<AppStateType, string>(state => state.profile.profile._id)\r\n    const success = useSelector<AppStateType, boolean>(state => state.packsList.success)\r\n    const loadingRequest = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const [searchTitle, setSearchTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const [showModalAdd, setShowModalAdd] = useState<boolean>(false)\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        page = 1, pageCount = 10, min = 0, max = 10, packName, sortPacks\r\n    } = useSelector<AppStateType, getPacksAPIParamsType>(state => state.packsList.packsParams);\r\n\r\n    const cardPacksTotalCount = useSelector<AppStateType, number>(state => state.packsList.cardPacksTotalCount);\r\n\r\n    const packsList = useSelector<AppStateType, Array<cardsPackType>>(state => state.packsList.cardPacks)\r\n\r\n    const onPageChangedHandler = useCallback((currentPage: number): void => {\r\n        dispatch(setPageNumberAC(currentPage))\r\n    }, [page])\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    function onLearnButtonClick(id: string) {\r\n        history.push(`/learn/${id}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!idUser) {\r\n            if (!loadingRequest) {\r\n                dispatch(AuthUser())\r\n            }\r\n        } else {\r\n            getPrivatePacks()\r\n        }\r\n    }, [dispatch, page, pageCount, sortPacks, min, max, packName])\r\n\r\n    const changeSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setSearchTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const setSearch = () => {\r\n        const trimmedSearch = searchTitle.trim()\r\n        if (trimmedSearch) {\r\n            dispatch(setPackNameAC(trimmedSearch))\r\n            getPrivatePacks()\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setSearchTitle(\"\")\r\n    }\r\n\r\n    const deletePackFun = (pack_id: string) => {\r\n        dispatch(deletePack({id: pack_id}))\r\n    }\r\n\r\n    const getPrivatePacks = () => {\r\n        if (props.user_id) {\r\n            dispatch(getPackList({pageCount, min, max, page, packName, user_id: props.user_id}))\r\n        } else {\r\n            dispatch(getPackList({pageCount, min, max, page, packName}))\r\n        }\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (!success) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.flex}>\r\n                {props.user_id && <div className={s.private}>\r\n                    <input type=\"checkbox\" className=\"toggle_input\" onChange={getPrivatePacks}\r\n                           checked={false}/>\r\n                    <label>private</label>\r\n                </div>}\r\n                <div className={s.search}>\r\n                    <div className={s.containerInputSearch}>\r\n                        <InputContainer\r\n                            placeholder={'Search'}\r\n                            changeValue={changeSearch}\r\n                            errorMessage={''}\r\n                            typeInput={'text'}\r\n                            value={searchTitle}\r\n                        />\r\n                        <button onClick={() => {\r\n                            dispatch(setPackNameAC(''))\r\n                        }}>X\r\n                        </button>\r\n                    </div>\r\n                    <button onClick={setSearch}>SEARCH</button>\r\n                </div>\r\n                <table className={s.table}>\r\n                    <tr className={s.tableRow}>\r\n                        <th className={s.tableHeader}>{\"NAME\"}</th>\r\n                        <th className={s.tableHeader}>{\"CARDS COUNT\"}</th>\r\n                        <th className={s.tableHeader}>{\"USER NAME\"}</th>\r\n                        <th className={s.tableHeader}>{\"RATING\"}</th>\r\n                        <th className={s.tableHeader}>{\"GRADE\"}</th>\r\n                        <th className={s.tableHeader}>{\"UPDATED\"}</th>\r\n                        {props.user_id && <th>\r\n                            <MainActionButton actionClick={() => setShowModalAdd(true)}\r\n                                              title={\"ADD\"}/>\r\n                        </th>}\r\n                    </tr>\r\n                    {packsList.map((pack) => (\r\n                        <tr key={pack._id} className={s.tableRow}>\r\n                            <td className={s.tableCol}>{pack.name}</td>\r\n                            <td className={s.tableCol}>{pack.cardsCount}</td>\r\n                            <td className={s.tableCol}>{pack.user_name}</td>\r\n                            <td className={s.tableCol}>{pack.rating}</td>\r\n                            <td className={s.tableCol}>{pack.grade}</td>\r\n                            <td className={s.tableCol}>{pack.updated}</td>\r\n                            {(props.user_id) && <ManagePacksButton _id={pack._id} deletePackFun={deletePackFun} />}\r\n                            <td><NavLink to={`/cards-list/${pack._id}`} className={s.card} activeClassName={s.activeLink}>Cards\r\n                                list</NavLink>\r\n                                <NavLink to={`/learn/${pack._id}`} className={s.learn} activeClassName={s.activeLink}>Learn</NavLink>\r\n                            </td>\r\n\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n                <Pagination totalItemsCount={cardPacksTotalCount}\r\n                            pageSize={pageCount}\r\n                            portionSize={10}\r\n                            currentPage={page}\r\n                            onPageChanged={onPageChangedHandler}\r\n                />\r\n            </div>\r\n            <ModalWindowAdd showModal={showModalAdd} setShowModal={setShowModalAdd} />\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./modalWindowProfile.module.scss\";\r\n\r\ntype ModalWindowProfilePropsType = {\r\n    onClick: () => void\r\n    width: number\r\n    height: number\r\n    title?: string\r\n    isOpen?: boolean\r\n}\r\n\r\nexport const ModalWindowProfile: React.FC<ModalWindowProfilePropsType> = ({onClick, width, height, children}) => {\r\n\r\n       const closeModelWindow = () => {\r\n        onClick()\r\n    }\r\n\r\n    const left = `calc(50vw - ${width / 2}px)`;\r\n\r\n    const modalStyle = {\r\n        left,\r\n        width,\r\n        height\r\n    }\r\n\r\n   return (\r\n        <div className={s.profilePageContainer}>\r\n            <>\r\n                <div className={s.modalBackground} onClick={closeModelWindow}>\r\n                </div>\r\n                <div className={s.modalMessage} style={modalStyle}>\r\n                    {children}\r\n                </div>\r\n            </>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {AuthUser, logOutUser} from \"../Login/login-reducer\";\r\nimport s from \"../Profile/Profile.module.scss\";\r\nimport {PersonalInformation} from \"./PersonalInformation\";\r\nimport {profileResponseType} from \"./profile-reducer\";\r\nimport {PacksList} from \"../PacksList/PacksList\";\r\nimport {ModalWindowProfile} from \"../../common/ModalWindow/ModalWindowProfile\";\r\n\r\n\r\nexport const Profile = () => {\r\n\r\n    const [editModeProfile, setEditModeProfile] = useState<boolean>(false)\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const idUser = useSelector<AppStateType, string>(state => state.profile.profile._id)\r\n    const loadingRequest = useSelector<AppStateType, boolean>(state => state.login.loadingRequest)\r\n    const profile = useSelector<AppStateType, profileResponseType>(state => state.profile.profile)\r\n    const dispatch = useDispatch()\r\n\r\n    const closeModelWindow = () => setEditModeProfile(false)\r\n\r\n    useEffect(() => {\r\n        if (!idUser && !loadingRequest) {\r\n            dispatch(AuthUser())\r\n        }\r\n    }, [idUser])\r\n\r\n    const logOut = () => {\r\n        dispatch(logOutUser())\r\n    }\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.profilePageContainer}>\r\n            <div className={s.profileContainer}>\r\n                <div className={s.profileAboutYou}>\r\n                    <img src={profile.avatar && profile.avatar ? profile.avatar : ''} alt=\"user_photo\"/>\r\n                    <div>{profile.name && profile.name}</div>\r\n                    <div>{profile.email && profile.email}</div>\r\n                    <div>I am Front-end developer</div>\r\n                    <div>public card packs count: {profile.publicCardPacksCount && profile.publicCardPacksCount}</div>\r\n                    <div>\r\n                        <button className={s.btnEdit} onClick={() => setEditModeProfile(true)}>Edit profile</button>\r\n                        <button className={s.btnLogout} onClick={logOut}>log out</button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.numberOfCards}>Number of cards</div>\r\n            </div>\r\n            <div className={s.profilePacksList}>\r\n                <h2>My packs list</h2>\r\n                <PacksList user_id={profile._id && profile._id}/>\r\n            </div>\r\n            {editModeProfile && <ModalWindowProfile onClick={closeModelWindow} height={540} width={415}>\r\n                <PersonalInformation onClick={closeModelWindow} name={profile.name}\r\n                                     avatar={profile.avatar}/>\r\n            </ModalWindowProfile>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from './Error404.module.scss'\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={styles.pageNotFound}>404</div>\r\n    )\r\n}","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {SetNewPasswordAPI} from \"../../api/api\";\r\n\r\nconst initialStateSetNewPassword = {\r\n    error: '',\r\n    loadingRequest: false,\r\n    success: false,\r\n}\r\n\r\nexport const setNewPasswordReducer = (state: initialSetNewPasswordType = initialStateSetNewPassword, action: actionsSetNewPasswordType): initialSetNewPasswordType => {\r\n    switch (action.type) {\r\n        case 'SET-NEW-PASSWORD/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'SET-NEW-PASSWORD/SET-LOADING':\r\n            return {...state, ...action.payload}\r\n        case 'SET-NEW-PASSWORD/SET-SUCCESS':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setServerErrorMessage = (error: string) => ({type: 'SET-NEW-PASSWORD/SET-ERROR', payload: {error}} as const)\r\nconst setLoading = (loadingRequest: boolean) => ({type: 'SET-NEW-PASSWORD/SET-LOADING', payload: {loadingRequest}} as const)\r\nconst setSuccess = (success: boolean) => ({type: 'SET-NEW-PASSWORD/SET-SUCCESS', payload: {success}} as const)\r\n\r\n//TC\r\nexport const setNewPasswordThunk = (password: string, token: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setLoading(true))\r\n\r\n    try {\r\n        const response = await SetNewPasswordAPI.setNewPassword(password, token)\r\n        dispatch(setSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessage(error))\r\n\r\n        dispatch(setSuccess(false))\r\n    } finally {\r\n        dispatch(setLoading(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialSetNewPasswordType = typeof initialStateSetNewPassword\r\nexport type actionsSetNewPasswordType = ReturnType<typeof setServerErrorMessage>\r\n    | ReturnType<typeof setLoading>\r\n    | ReturnType<typeof setSuccess>","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './Enter-new-password.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setServerErrorMessage, setNewPasswordThunk} from \"./enter-new-password-reducer\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\n\r\nexport const EnterNewPassword = () => {\r\n    const [password, setPassword] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n    const { token } = useParams<{token: string}>()\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.newPassword.loadingRequest)\r\n    const successResponse = useSelector<AppStateType, boolean>(state => state.newPassword.success)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.newPassword.error)\r\n\r\n    const setNewPassword = () => {\r\n        if (!PasswordValidation(password)) {\r\n            setError('Minimum 8 characters')\r\n        } else {\r\n            dispatch(setNewPasswordThunk(password, token))\r\n        }\r\n    }\r\n\r\n    const inputPassword = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value)\r\n        setError('')\r\n        serverErrorMessage && dispatch(setServerErrorMessage(''))\r\n    }\r\n\r\n    if (successResponse) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.containerNewPassword}>\r\n            <HeaderEnterApp title={'Create new password'}/>\r\n\r\n            <InputContainer\r\n                title={'Password'}\r\n                value={password}\r\n                changeValue={inputPassword}\r\n                errorMessage={error}\r\n                typeInput={'password'}\r\n            />\r\n\r\n            <p className={s.textAction}>Create new password and we will send you further instructions to email</p>\r\n            <div className={s.positionActionBtn}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton\r\n                        loadingStatus={loadingStatus}\r\n                        actionClick={setNewPassword}\r\n                        disabledBtnSubmit={!password}\r\n                        title={'Create new password'} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {AppThunkType} from \"../../state/redux-store\";\r\nimport {PasswordRecoveryAPI} from \"../../api/api\";\r\n\r\nconst initialStatePasswordRecovery = {\r\n    error: '',\r\n    loadingRequest: false,\r\n    success: false,\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state: initialPasswordRecoveryType = initialStatePasswordRecovery, action: actionsPasswordRecoveryType): initialPasswordRecoveryType => {\r\n    switch (action.type) {\r\n        case 'PASSWORD-RECOVERY/SET-ERROR':\r\n            return {...state, ...action.payload}\r\n        case 'PASSWORD-RECOVERY/SET-LOADING':\r\n            return {...state, ...action.payload}\r\n        case 'PASSWORD-RECOVERY/SET-SUCCESS':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nconst setLoadingRequest = (loadingRequest: boolean) => ({\r\n    type: 'PASSWORD-RECOVERY/SET-LOADING',\r\n    payload: {loadingRequest}\r\n} as const)\r\nexport const setSuccess = (success: boolean) => ({\r\n    type: 'PASSWORD-RECOVERY/SET-SUCCESS',\r\n    payload: {success}\r\n} as const)\r\nexport const setServerErrorMessageRecovery = (error: string) => {\r\n    return {\r\n        type: 'PASSWORD-RECOVERY/SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const passwordRecoveryThunk = (email: string): AppThunkType => async (dispatch) => {\r\n    dispatch(setLoadingRequest(true))\r\n\r\n    try {\r\n        const response = await PasswordRecoveryAPI.forgot(email)\r\n        dispatch(setSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRecovery(error))\r\n\r\n        dispatch(setSuccess(false))\r\n    } finally {\r\n        dispatch(setLoadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialPasswordRecoveryType = typeof initialStatePasswordRecovery\r\nexport type actionsPasswordRecoveryType =\r\n    | ReturnType<typeof setLoadingRequest>\r\n    | ReturnType<typeof setSuccess>\r\n    | ReturnType<typeof setServerErrorMessageRecovery>","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport st from './Password-recovery.module.scss'\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {passwordRecoveryThunk, setServerErrorMessageRecovery, setSuccess} from \"./password-recovery-reducer\";\r\n\r\nimport s from \"../Login/Login.module.scss\";\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\n\r\nexport const PasswordRecovery = () => {\r\n    const [email, setEmail] = useState<string>('max.migalin10@gmail.com')\r\n    const [error, setError] = useState<string>('')\r\n    const disabledBtnSubmit = !email\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.PasswordRecovery.loadingRequest)\r\n    const success = useSelector<AppStateType, boolean>(state => state.PasswordRecovery.success)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.PasswordRecovery.error)\r\n\r\n    const sendLetter = () => {\r\n        !emailValidation(email) ?\r\n            setError('Incorrect email')\r\n            :\r\n            dispatch(passwordRecoveryThunk(email))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setSuccess(false))\r\n            dispatch(setServerErrorMessageRecovery(''))\r\n        }\r\n    }, [])\r\n\r\n    const inputEmail = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError('')\r\n        setEmail(event.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRecovery(''))\r\n        if (emailValidation(event.currentTarget.value)) {\r\n            setError('')\r\n        }\r\n    }\r\n\r\n    if (success) {\r\n        return <Redirect to={`/password-recovery-check-email/${email}`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={st.forgotPasswordContainer}>\r\n            <HeaderEnterApp title={'Forgot your password?'}/>\r\n            <InputContainer\r\n                placeholder={'Email'}\r\n                changeValue={inputEmail}\r\n                errorMessage={error}\r\n                typeInput={'email'}\r\n                value={email}\r\n            />\r\n            <p className={st.textAction}>Enter your email address and we will send you further instructions</p>\r\n\r\n            <div className={s.btnFooterLoginContainer}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n                <div className={s.blueBtnContainer}>\r\n                    <MainActionButton\r\n                        title={'Send Instructions'}\r\n                        actionClick={sendLetter}\r\n                        disabledBtnSubmit={disabledBtnSubmit}\r\n                        loadingStatus={loadingStatus}\r\n                    />\r\n                </div>\r\n                <p className={s.DifferentAccountBtn}>Did you remember your password?</p>\r\n                <NavLink to=\"/login\" className={s.footerBtn}>Try logging in</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {AppThunkType} from \"../../state/redux-store\";\r\nimport {registrationAPI} from \"../../api/api\";\r\n\r\nconst initialStateRegistration = {\r\n    isRegistration: false,\r\n    loadingRequest: false,\r\n    error: ''\r\n}\r\n\r\nexport const registrationReducer = (state: initialRegistrationType = initialStateRegistration, action: actionsRegistrationType): initialRegistrationType => {\r\n    switch (action.type) {\r\n        case 'REGISTRATION/SET-REGISTRATION':\r\n            return {...state, ...action.payload}\r\n        case 'REGISTRATION/LOADING-REQUEST':\r\n            return {...state, ...action.payload}\r\n        case 'LOGIN/INCORRECT-DATA-LOG-IN':\r\n            return {...state, ...action.payload}\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actionC\r\nexport const setRegistrationAC = (isRegistration: boolean) => ({\r\n    type: 'REGISTRATION/SET-REGISTRATION', payload: {isRegistration}\r\n} as const)\r\nconst loadingRequest = (loadingRequest: boolean) => ({\r\n    type: 'REGISTRATION/LOADING-REQUEST',\r\n    payload: {loadingRequest}\r\n} as const)\r\nexport const setServerErrorMessageRegistration = (error: string) => {\r\n    return {\r\n        type: 'LOGIN/INCORRECT-DATA-LOG-IN',\r\n        payload: {error}\r\n    } as const\r\n}\r\n\r\n//thunkC\r\nexport const setRegistration = (email: string, password: string): AppThunkType => async (dispatch: Dispatch<actionsRegistrationType>) => {\r\n    dispatch(loadingRequest(true))\r\n\r\n    try {\r\n        const response = await registrationAPI.register(email, password)\r\n        dispatch(setRegistrationAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setServerErrorMessageRegistration(error))\r\n    } finally {\r\n        dispatch(loadingRequest(false))\r\n    }\r\n}\r\n\r\n//types\r\nexport type initialRegistrationType = typeof initialStateRegistration\r\nexport type actionsRegistrationType = ReturnType<typeof setRegistrationAC>\r\n    | ReturnType<typeof loadingRequest>\r\n    | ReturnType<typeof setServerErrorMessageRegistration>","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Registration.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {setRegistration, setRegistrationAC, setServerErrorMessageRegistration} from \"./registration-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InputContainer} from \"../../common/InputContainer/InputContainer\";\r\nimport {emailValidation} from \"../../common/validation/EmailValidation\";\r\nimport {PasswordValidation} from \"../../common/validation/passwordValidation\";\r\nimport {HeaderEnterApp} from \"../../common/HeaderEnterApp/HeaderEnterApp\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const Registration = () => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [checkPassword, setCheckPassword] = useState<string>('')\r\n\r\n    const [errorEmailMessage, setErrorEmailMessage] = useState<string>('')\r\n    const [errorPasswordMessage, setErrorPasswordMessage] = useState<string>('')\r\n\r\n    const disabledBtnSubmit = !email || !password || !checkPassword\r\n\r\n    const dispatch = useDispatch()\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.registration.loadingRequest)\r\n    const isRegistration = useSelector<AppStateType, boolean>(state => state.registration.isRegistration)\r\n    const serverErrorMessage = useSelector<AppStateType, string>(state => state.registration.error)\r\n\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorEmailMessage('')\r\n        setEmail(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorPasswordMessage('')\r\n        setPassword(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onChangeCheckPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setErrorPasswordMessage('')\r\n        setCheckPassword(e.currentTarget.value)\r\n        serverErrorMessage && dispatch(setServerErrorMessageRegistration(''))\r\n    }\r\n\r\n    const onRegistration = () => {\r\n        if (!emailValidation(email)) {\r\n            setErrorEmailMessage('Incorrect email')\r\n        } else if (!PasswordValidation(password)) {\r\n            setErrorPasswordMessage('Minimum 8 characters')\r\n        } else if (password !== checkPassword) {\r\n            setErrorPasswordMessage('Enter the same password')\r\n        } else {\r\n            dispatch(setRegistration(email, password))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(setServerErrorMessageRegistration(''))\r\n            dispatch(setRegistrationAC(false))\r\n        }\r\n    }, [])\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    const goBack = () => {\r\n        window.history.go(-1);\r\n    }\r\n\r\n    return (\r\n        <div className={s.registrationContainer}>\r\n            <HeaderEnterApp title={'Sign Up'}/>\r\n            <div className={s.inputFields}>\r\n                <InputContainer\r\n                    title={'Email'}\r\n                    typeInput={'email'}\r\n                    value={email}\r\n                    changeValue={onChangeEmail}\r\n                    errorMessage={errorEmailMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'password'}\r\n                    typeInput={'password'}\r\n                    value={password}\r\n                    changeValue={onChangePassword}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n                <InputContainer\r\n                    title={'Confirm password'}\r\n                    typeInput={'password'}\r\n                    value={checkPassword}\r\n                    changeValue={onChangeCheckPassword}\r\n                    errorMessage={errorPasswordMessage}\r\n                />\r\n            </div>\r\n\r\n            <div className={s.positionBtnsAndError}>\r\n                <span className={s.errorMessageContainer}>{serverErrorMessage}</span>\r\n\r\n                <div className={s.btns}>\r\n                    <a className={s.btnCancel} onClick={goBack}>Cancel</a>\r\n                    <div className={s.blueBtnContainer}>\r\n                        <MainActionButton\r\n                            actionClick={onRegistration}\r\n                            disabledBtnSubmit={disabledBtnSubmit}\r\n                            title={'Register'}\r\n                            loadingStatus={loadingStatus}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Navbar.module.scss';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/login\" activeClassName={s.activeLink}>Login</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/password-recovery\" activeClassName={s.activeLink}>Password recovery</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/registration\" activeClassName={s.activeLink}>Registration</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/packs-list\" activeClassName={s.activeLink}>Packs list</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/checkEmail.27258fd7.svg\";","import React from \"react\";\r\nimport s from './Password-recovery.module.scss'\r\nimport checkEmail from '../../media/password/checkEmail.svg'\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nexport const CheckEmail = () => {\r\n    const {email} = useParams<{ email: string }>()\r\n\r\n    return (\r\n        <div className={s.containerCheckEmail}>\r\n            <p className={s.headerCheckEmail}>It-incubator</p>\r\n            <div className={s.imageCheckEmail}>\r\n                <img src={checkEmail} alt={'Check email'}/>\r\n            </div>\r\n            <p className={s.titleCheckEmail}>Check Email</p>\r\n            <p className={s.textActionCheckEmail}>We’ve sent an Email with instructions to {email}</p>\r\n        </div>\r\n    )\r\n}","import {addCardDataType, CardsListAPI, cardType, getCardsAPIParamsType,} from \"../../api/api\";\r\nimport {AppThunkType, GetAppStateType} from \"../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState = {\r\n    arrayCard: [] as Array<cardType>,\r\n    grade: 0,\r\n    sortCards: \"\" as string,\r\n    maxGrade: 1000 as number | undefined,\r\n    minGrade: 0 as number | undefined,\r\n    page: 1,\r\n    pageCount: 5,\r\n    cardsTotalCount: 100,\r\n    cardsPack_id: \"\",\r\n    searchVal: \"\",\r\n    sort: \"\",\r\n    question: \"\",\r\n    searchCardQuestion: \"\" as string | undefined,\r\n    success: false\r\n}\r\n\r\n//types\r\ntype initialStateType = typeof initialState\r\ntype GetCardsListAT = ReturnType<typeof GetCardsListAC>\r\ntype setGradeCardAT = ReturnType<typeof setGradeCardAC>\r\ntype SetSuccessAT = ReturnType<typeof SetSuccessAC>\r\n\r\nexport type actionCardsListType = GetCardsListAT | SetSuccessAT | setGradeCardAT\r\n\r\n\r\n//actionC\r\nexport const GetCardsListAC = (params: Array<cardType>) => ({type: 'cardList/GET-CARDSLIST', params} as const)\r\nexport const SetSuccessAC = (success: boolean) => ({type: 'cardList/SET-SUCCESS', success} as const)\r\nexport const setGradeCardAC = (grade: number) => ({ type: \"SET-GRADE\", grade } as const);\r\n\r\nexport const cardsListReducer = (state = initialState, action: actionCardsListType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"cardList/GET-CARDSLIST\":\r\n            return {...state, arrayCard: action.params.map(cl => ({...cl}))}\r\n        case \"cardList/SET-SUCCESS\":\r\n            return {...state, success: action.success}\r\n        case \"SET-GRADE\": {\r\n            return { ...state, grade: action.grade };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunkC\r\nexport const getCardsList = (params: getCardsAPIParamsType): AppThunkType => async (dispatch: Dispatch<actionCardsListType>, getStore: GetAppStateType) => {\r\n\r\n    try {\r\n        const response = await CardsListAPI.getCards({...params})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n        dispatch(SetSuccessAC(true))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(SetSuccessAC(false))\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const addCard = (data: addCardDataType): AppThunkType => async (dispatch: Dispatch<actionCardsListType>) => {\r\n\r\n    try {\r\n        const responseAdd = await CardsListAPI.addCard(data)\r\n        const response = await CardsListAPI.getCards({cardPack_id: data.card.cardsPack_id})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const deleteCard = (params: {id: string, cardPack_id: string}): AppThunkType => async (dispatch: Dispatch<actionCardsListType>) => {\r\n\r\n    try {\r\n        const responseDelete = await CardsListAPI.deleteCard(params)\r\n        const response = await CardsListAPI.getCards({cardPack_id: params.cardPack_id})\r\n        dispatch(GetCardsListAC(response.data.cards))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n    } finally {\r\n    }\r\n}\r\n\r\nexport const gradeCardTC = (grade:number, card_id:string) => async (dispatch: Dispatch<actionCardsListType>) => {\r\n\r\n    try {\r\n        await CardsListAPI.setCardGrade(grade, card_id)\r\n    } catch (e) {\r\n        console.log('GRADE_CARD_ERROR: ', {...e})\r\n    } finally {\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\ntype ManageButtonPropsType = {\r\n    _id: string\r\n    cardPack_id: string\r\n    deleteCardFun: (id: string, cardPack_id: string) => void\r\n}\r\n\r\nexport const ManageCardsButton: React.FC<ManageButtonPropsType> = (props) => {\r\n    return (\r\n        <>\r\n            <td>\r\n                <MainActionButton actionClick={() => props.deleteCardFun(props._id, props.cardPack_id)}\r\n                                  title={\"DELETE\"}/>\r\n            </td>\r\n            <td>\r\n                <MainActionButton actionClick={() => {}}\r\n                                  title={\"UPDATE\"}/>\r\n            </td>\r\n        </>\r\n    )\r\n}","import s from './CardsList.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useEffect} from \"react\";\r\nimport {addCard, deleteCard, getCardsList} from \"./cardsList-reducer\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {cardType} from \"../../api/api\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {AuthUser} from \"../Login/login-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ManageCardsButton} from \"./ManageCardsButton\";\r\nimport {MainActionButton} from \"../../common/MainActionButton/MainActionButton\";\r\n\r\nexport const CardsList = () => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.login.logIn)\r\n    const idUser = useSelector<AppStateType, string>(state => state.profile.profile._id)\r\n    const success = useSelector<AppStateType, boolean>(state => state.cardsList.success)\r\n    const dispatch = useDispatch();\r\n    const {id} = useParams<{ id: string }>()\r\n\r\n    useEffect(() => {\r\n        if (!idUser) {\r\n            dispatch(AuthUser())\r\n        } else {\r\n            dispatch(getCardsList({cardPack_id: id}))\r\n        }\r\n    }, [dispatch, id])\r\n\r\n    const cardsList = useSelector<AppStateType, Array<cardType>>(state => state.cardsList.arrayCard)\r\n\r\n    const addCardFun = () => {\r\n        dispatch(addCard({card: {cardsPack_id: id}}))\r\n    }\r\n\r\n    const deleteCardFun = (id: string, cardPack_id: string) => {\r\n        dispatch(deleteCard({id, cardPack_id}))\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    if (!success) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <table className={s.table}>\r\n            <tr className={s.tableRow}>\r\n                <th className={s.tableHeader}>{\"QUESTION\"}</th>\r\n                <th className={s.tableHeader}>{\"ANSWER\"}</th>\r\n                <th className={s.tableHeader}>{\"GRADE\"}</th>\r\n                <th className={s.tableHeader}>{\"UPDATED\"}</th>\r\n                <th>\r\n                    <MainActionButton actionClick={addCardFun}\r\n                                      title={\"ADD\"}/>\r\n                </th>\r\n            </tr>\r\n            {cardsList.map((card) => (\r\n                <tr key={card._id} className={s.tableRow}>\r\n                    <td className={s.tableCol}>{card.question}</td>\r\n                    <td className={s.tableCol}>{card.answer}</td>\r\n                    <td className={s.tableCol}>{card.grade}</td>\r\n                    <td className={s.tableCol}>{card.updated}</td>\r\n                    <ManageCardsButton _id={card._id} cardPack_id={card.cardsPack_id} deleteCardFun={deleteCardFun}/>\r\n                </tr>\r\n            ))}\r\n        </table>\r\n    )\r\n}","import {cardType} from \"../api/api\";\r\n\r\n\r\nexport const getRandomCard = (cards: Array<cardType>) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {cardType} from \"../../api/api\";\r\nimport {getRandomCard} from \"../../common/random\";\r\nimport {getCardsList, gradeCardTC} from \"../CardsList/cardsList-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst grades = [\"Didn't know\", 'Forgot', 'Confused', 'A lot of thought', 'Knew'];\r\n\r\nexport const Learn= () => {\r\n\r\n    const loadingStatus = useSelector<AppStateType, boolean>(state => state.packsList.success);\r\n    const success = useSelector<AppStateType, boolean>(state => state.cardsList.success);\r\n    const {id} = useParams<{ id: string }>();\r\n    const {\r\n        arrayCard} = useSelector((state: AppStateType) => state.cardsList)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [isChecked, setIsChecked] = useState<boolean>(false);\r\n    const [first, setFirst] = useState<boolean>(true);\r\n    const [card, setCard] = useState<cardType>({\r\n        answer: 'answer fake',\r\n        question: 'question fake',\r\n        cardsPack_id: '',\r\n        grade: 0,\r\n        rating: 0,\r\n        shots: 0,\r\n        type: 'card',\r\n        user_id: '',\r\n        created: '',\r\n        updated: '',\r\n        __v: 0,\r\n        _id: 'fake',\r\n        comment: '',\r\n        more_id: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (first) {\r\n            dispatch(getCardsList({cardPack_id: id}));\r\n            setFirst(false);\r\n        }\r\n        if (arrayCard.length > 0) setCard(getRandomCard(arrayCard));\r\n\r\n        return () => {\r\n            console.log('LearnContainer useEffect off');\r\n        }\r\n    }, [dispatch, id, arrayCard, first]);\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n\r\n        if (arrayCard.length > 0) {\r\n            // dispatch\r\n            setCard(getRandomCard(arrayCard));\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    const sendGrade = (grade: number) => {\r\n        dispatch(gradeCardTC(grade, card._id))\r\n    }\r\n    if (!success) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return   (\r\n        <div>\r\n            LearnPage\r\n\r\n            <div>{card.question}</div>\r\n            <div>\r\n                <button onClick={() => setIsChecked(true)}>check</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={onNext}>next</button>\r\n            </div>\r\n\r\n            {isChecked && (\r\n                <>\r\n                    <div>{card.answer}</div>\r\n\r\n                    {grades.map((g, i) => (\r\n                        <button key={'grade-' + i} onClick={() => sendGrade(i + 1)}>{g}</button>\r\n                    ))}\r\n                </>\r\n            )}\r\n        </div>\r\n)\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {Error404} from \"./components/Error404/Error404\";\r\nimport {EnterNewPassword} from \"./components/EnterNewPassword/Enter-new-password\";\r\nimport {PasswordRecovery} from \"./components/PasswordRecovery/Password-recovery\";\r\nimport {Registration} from \"./components/Registration/Registration\";\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {CheckEmail} from \"./components/PasswordRecovery/ChekEmail\";\r\nimport {PacksList} from \"./components/PacksList/PacksList\";\r\nimport { CardsList } from './components/CardsList/CardsList';\r\nimport {Learn} from \"./components/Learn/Learn\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n             <div className=\"App\">\r\n                <Navbar />\r\n                <main className={'mainContainer'}>\r\n                    <Switch>\r\n                        <Route path={'/learning-cards/'} render={() => <div>Hi!</div>}/>\r\n                        <Route exact path={'/login'} render={() => <Login/>}/>\r\n                        <Route exact path={'/profile'} render={() => <Profile/>}/>\r\n                        <Route path={'/new-password/:token'} render={() => <EnterNewPassword/>}/>\r\n                        <Route exact path={'/password-recovery'} render={() => <PasswordRecovery/>}/>\r\n                        <Route path={'/password-recovery-check-email/:email'} render={() => <CheckEmail/>}/>\r\n                        <Route exact path={'/registration'} render={() => <Registration/>}/>\r\n                        <Route exact path={'/packs-list'} render={() => <PacksList/>}/>\r\n                        <Route exact path={'/cards-list/:id'} render={() => <CardsList/>}/>\r\n                        <Route exact path={'/learn/:id'} render={() => <Learn />}/>\r\n                        <Route path={'*'} render={() => <Error404/>}/>\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {actionsLoginType, loginReducer} from \"../components/Login/login-reducer\";\r\nimport {\r\n    actionsPasswordRecoveryType,\r\n    passwordRecoveryReducer\r\n} from \"../components/PasswordRecovery/password-recovery-reducer\";\r\nimport {\r\n    actionsSetNewPasswordType,\r\n    setNewPasswordReducer\r\n} from \"../components/EnterNewPassword/enter-new-password-reducer\";\r\nimport {actionsProfileType, profileReducer} from \"../components/Profile/profile-reducer\";\r\nimport {actionsRegistrationType, registrationReducer} from \"../components/Registration/registration-reducer\";\r\nimport {actionPacksListType, packsListReducer} from \"../components/PacksList/packsList-reducer\";\r\nimport {actionCardsListType, cardsListReducer} from \"../components/CardsList/cardsList-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    PasswordRecovery: passwordRecoveryReducer,\r\n    newPassword: setNewPasswordReducer,\r\n    profile: profileReducer,\r\n    registration: registrationReducer,\r\n    packsList: packsListReducer,\r\n    cardsList: cardsListReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type GetAppStateType = () => AppStateType;\r\n\r\ntype AppActionsType = actionsSetNewPasswordType\r\n    | actionsLoginType\r\n    | actionsPasswordRecoveryType\r\n    | actionsProfileType\r\n    | actionsRegistrationType\r\n    | actionPacksListType\r\n    | actionCardsListType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/redux-store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}